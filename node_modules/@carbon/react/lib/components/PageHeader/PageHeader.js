/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');
var layout = require('@carbon/layout');
var useMatchMedia = require('../../internal/useMatchMedia.js');
require('../Text/index.js');
var DefinitionTooltip = require('../Tooltip/DefinitionTooltip.js');
require('../Tooltip/Tooltip.js');
var AspectRatio = require('../AspectRatio/AspectRatio.js');
var Tabs$1 = require('../Tabs/Tabs.js');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _p, _p2;

/**
 * ----------
 * PageHeader
 * ----------
 */

const PageHeader = /*#__PURE__*/React__default["default"].forwardRef(function PageHeader(_ref, ref) {
  let {
    className,
    children,
    ...other
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const classNames = cx__default["default"]({
    [`${prefix}--page-header`]: true
  }, className);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: classNames,
    ref: ref
  }, other), _p || (_p = /*#__PURE__*/React__default["default"].createElement("p", null, "page header")), children);
});
PageHeader.displayName = 'PageHeader';

/**
 * -----------------------
 * PageHeaderBreadcrumbBar
 * -----------------------
 */

const PageHeaderBreadcrumbBar = /*#__PURE__*/React__default["default"].forwardRef(function PageHeaderBreadcrumbBar(_ref2, ref) {
  let {
    className,
    children,
    ...other
  } = _ref2;
  const prefix = usePrefix.usePrefix();
  const classNames = cx__default["default"]({
    [`${prefix}--page-header__breadcrumb-bar`]: true
  }, className);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: classNames,
    ref: ref
  }, other), _p2 || (_p2 = /*#__PURE__*/React__default["default"].createElement("p", null, "page header breadcrumb bar")), children);
});
PageHeaderBreadcrumbBar.displayName = 'PageHeaderBreadcrumbBar';

/**
 * -----------------
 * PageHeaderContent
 * -----------------
 */

const PageHeaderContent = /*#__PURE__*/React__default["default"].forwardRef(function PageHeaderContent(_ref3, ref) {
  let {
    className,
    children,
    title,
    subtitle,
    renderIcon: IconElement,
    contextualActions,
    pageActions,
    ...other
  } = _ref3;
  const prefix = usePrefix.usePrefix();
  const classNames = cx__default["default"]({
    [`${prefix}--page-header__content`]: true
  }, className);
  const titleRef = React.useRef(null);
  const [isEllipsisApplied, setIsEllipsisApplied] = React.useState(false);
  const isEllipsisActive = element => {
    setIsEllipsisApplied(element.offsetHeight < element.scrollHeight);
    return element.offsetHeight < element.scrollHeight;
  };
  React.useLayoutEffect(() => {
    titleRef.current && isEllipsisActive(titleRef.current);
  }, [title]);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: classNames,
    ref: ref
  }, other), /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__title-wrapper`
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__start`
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__title-container`
  }, IconElement && /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__icon`
  }, /*#__PURE__*/React__default["default"].createElement(IconElement, null)), isEllipsisApplied ? /*#__PURE__*/React__default["default"].createElement(DefinitionTooltip.DefinitionTooltip, {
    definition: title
  }, /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    ref: titleRef,
    as: "h4",
    className: `${prefix}--page-header__content__title`
  }, title)) : /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    ref: titleRef,
    as: "h4",
    className: `${prefix}--page-header__content__title`
  }, title)), contextualActions && /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__contextual-actions`
  }, contextualActions)), /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__end`
  }, pageActions && /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__page-actions`
  }, pageActions))), subtitle && /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "h3",
    className: `${prefix}--page-header__content__subtitle`
  }, subtitle), children && /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--page-header__content__body`
  }, children));
});
PageHeaderContent.displayName = 'PageHeaderContent';
PageHeaderContent.propTypes = {
  /**
   * Provide child elements to be rendered inside PageHeaderContent.
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be added to your PageHeaderContent
   */
  className: PropTypes__default["default"].string,
  /**
   * Provide an optional icon to render in front of the PageHeaderContent's title.
   */

  renderIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),
  /**
   * The PageHeaderContent's title
   */
  title: PropTypes__default["default"].string.isRequired,
  /**
   * The PageHeaderContent's subtitle
   */
  subtitle: PropTypes__default["default"].string,
  /**
   * The PageHeaderContent's contextual actions
   */
  contextualActions: PropTypes__default["default"].node,
  /**
   * The PageHeaderContent's page actions
   */
  pageActions: PropTypes__default["default"].node
};

/**
 * ----------------
 * PageHeaderHeroImage
 * ----------------
 */

const PageHeaderHeroImage = /*#__PURE__*/React__default["default"].forwardRef(function PageHeaderHeroImage(_ref4, ref) {
  let {
    className,
    children,
    ...other
  } = _ref4;
  const prefix = usePrefix.usePrefix();
  const classNames = cx__default["default"]({
    [`${prefix}--page-header__hero-image`]: true
  }, className);
  const lgMediaQuery = `(min-width: ${layout.breakpoints.lg.width})`;
  const isLg = useMatchMedia.useMatchMedia(lgMediaQuery);
  return /*#__PURE__*/React__default["default"].createElement(AspectRatio["default"], _rollupPluginBabelHelpers["extends"]({
    className: classNames
  }, other, {
    ratio: isLg ? '2x1' : '3x2'
  }), children);
});
PageHeaderHeroImage.displayName = 'PageHeaderHeroImage';
PageHeaderHeroImage.propTypes = {
  /**
   * Provide child elements to be rendered inside PageHeaderHeroImage.
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be added to your PageHeaderHeroImage
   */
  className: PropTypes__default["default"].string
};

/**
 * ----------------
 * PageHeaderTabBar
 * ----------------
 */

const PageHeaderTabBar = /*#__PURE__*/React__default["default"].forwardRef(function PageHeaderTabBar(_ref5, ref) {
  let {
    className,
    children,
    ...other
  } = _ref5;
  const prefix = usePrefix.usePrefix();
  const classNames = cx__default["default"]({
    [`${prefix}--page-header__tab-bar`]: true
  }, className);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: classNames,
    ref: ref
  }, other), children);
});
PageHeaderTabBar.displayName = 'PageHeaderTabBar';
const PageHeaderTabs = /*#__PURE__*/React__default["default"].forwardRef(function PageHeaderTabs(_ref6, ref) {
  let {
    className,
    children,
    ...other
  } = _ref6;
  return /*#__PURE__*/React__default["default"].createElement(Tabs$1.Tabs, other, children);
});
PageHeaderTabs.displayName = 'PageHeaderTabs';

/**
 * -------
 * Exports
 * -------
 */
const Root = PageHeader;
Root.displayName = 'PageHeader.Root';
const BreadcrumbBar = PageHeaderBreadcrumbBar;
BreadcrumbBar.displayName = 'PageHeaderBreadcrumbBar';
const Content = PageHeaderContent;
Content.displayName = 'PageHeaderContent';
const HeroImage = PageHeaderHeroImage;
HeroImage.displayName = 'PageHeaderHeroImage';
const TabBar = PageHeaderTabBar;
TabBar.displayName = 'PageHeaderTabBar';
const Tabs = PageHeaderTabs;
Tabs.displayName = 'PageHeader.Tabs';

exports.BreadcrumbBar = BreadcrumbBar;
exports.Content = Content;
exports.HeroImage = HeroImage;
exports.PageHeader = PageHeader;
exports.PageHeaderBreadcrumbBar = PageHeaderBreadcrumbBar;
exports.PageHeaderContent = PageHeaderContent;
exports.PageHeaderHeroImage = PageHeaderHeroImage;
exports.PageHeaderTabBar = PageHeaderTabBar;
exports.PageHeaderTabs = PageHeaderTabs;
exports.Root = Root;
exports.TabBar = TabBar;
exports.Tabs = Tabs;
