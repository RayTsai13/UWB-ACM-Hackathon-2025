/**
 * Copyright IBM Corp. 2014, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { ReactAttr } from '../../types/common';
export interface DialogProps extends ReactAttr<HTMLDialogElement> {
    /**
     * Provide the contents of the Dialog
     */
    children?: React.ReactNode;
    /**
     * Specify an optional className to be applied to the modal root node
     */
    className?: string;
    /**
     * Specifies whether the dialog is modal or non-modal. This cannot be changed
     * while open=true
     */
    modal?: boolean;
    /**
     * Specify a handler for the dialog's cancel event.
     * The browser fires this event when the user presses the Esc key and is cancelable.
     */
    onCancel?: React.ReactEventHandler<HTMLDialogElement>;
    /**
     * Specify a click handler applied to the dialog.
     */
    onClick?: React.ReactEventHandler<HTMLDialogElement>;
    /**
     * Specify a handler the dialog's close event.
     * The browser fires this event after the dialog has closed.
     */
    onClose?: React.ReactEventHandler<HTMLDialogElement>;
    /**
     * Specify a handler for closing Dialog.
     * The handler should care of closing Dialog, e.g. changing `open` prop.
     */
    onRequestClose?: React.ReactEventHandler<HTMLElement>;
    /**
     * Specify whether the Dialog is currently open
     */
    open?: boolean;
}
export declare const unstable__Dialog: React.ForwardRefExoticComponent<DialogProps & React.RefAttributes<unknown>>;
export interface DialogHeaderProps extends ReactAttr<HTMLDivElement> {
    /**
     * Provide the contents to be rendered inside of this component
     */
    children?: React.ReactNode;
}
export declare const DialogHeader: React.ForwardRefExoticComponent<DialogHeaderProps & React.RefAttributes<HTMLDivElement>>;
export interface DialogControlsProps extends ReactAttr<HTMLDivElement> {
    /**
     * Provide the contents to be rendered inside of this component
     */
    children?: React.ReactNode;
}
export declare const DialogControls: React.ForwardRefExoticComponent<DialogControlsProps & React.RefAttributes<HTMLDivElement>>;
export interface DialogCloseButtonProps extends ReactAttr<HTMLDivElement> {
    /**
     * Specify a click handler applied to the IconButton
     */
    onClick?: React.MouseEventHandler;
}
export declare const DialogCloseButton: React.ForwardRefExoticComponent<DialogCloseButtonProps & React.RefAttributes<HTMLDivElement>>;
