/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var index = require('../IconButton/index.js');
var noopFn = require('../../internal/noopFn.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const unstable__Dialog = /*#__PURE__*/React__default["default"].forwardRef((_ref, forwardRef) => {
  let {
    children,
    className,
    modal,
    onCancel = noopFn.noopFn,
    onClick = noopFn.noopFn,
    onClose = noopFn.noopFn,
    onRequestClose = noopFn.noopFn,
    open = false,
    ...rest
  } = _ref;
  const prefix = usePrefix.usePrefix();

  // This component needs access to a ref, placed on the dialog, to call the
  // various imperative dialog functions (show(), close(), etc.).
  // If the parent component has not passed a ref for forwardRef, forwardRef
  // will be null. A "backup" ref is needed to ensure the dialog's instance
  // methods can always be called within this component.
  const backupRef = React.useRef(null);
  const ref = forwardRef ?? backupRef;

  // Clicks on the backdrop of an open modal dialog should request the consuming component to close
  // the dialog. Clicks elsewhere, or on non-modal dialogs should not request
  // to close the dialog.
  function handleModalBackdropClick(e) {
    if (open && modal && e.target === ref.current) {
      onRequestClose(e);
    }
  }
  function handleClick(e) {
    handleModalBackdropClick(e);

    // onClick should always be called, no matter if the target is a modal
    // dialog, modal dialog backdrop, or non-modal dialog.
    onClick(e);
  }
  React.useEffect(() => {
    if (ref.current) {
      if (open) {
        if (modal) {
          // Display the dialog as a modal, over the top of any other dialogs
          // that might be present. Everything outside the dialog are inert
          // with interactions outside the dialog being blocked.
          ref.current.showModal();
        } else {
          // Display the dialog modelessly, i.e. still allowing interaction
          // with content outside of the dialog.
          ref.current.show();
        }
      } else {
        ref.current.close();
      }
    }
  }, [modal, open]);
  return /*#__PURE__*/React__default["default"].createElement("dialog", _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: cx__default["default"](`${prefix}--dialog`, {
      [`${prefix}--dialog--modal`]: modal
    }, className),
    ref: ref,
    onCancel: onCancel,
    onClick: handleClick,
    onClose: onClose
  }), children);
});
unstable__Dialog.displayName = 'Dialog';
unstable__Dialog.propTypes = {
  /**
   * Provide children to be rendered inside of the Dialog
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be applied to the modal root node
   */
  className: PropTypes__default["default"].string,
  /**
   * Modal specifies whether the Dialog is modal or non-modal. This cannot be
   * changed while open=true
   */
  modal: PropTypes__default["default"].bool,
  /**
   * Specify a handler for closing Dialog.
   * The handler should care of closing Dialog, e.g. changing `open` prop.
   */
  onRequestClose: PropTypes__default["default"].func,
  /**
   * open initial state
   */
  open: PropTypes__default["default"].bool
};
const DialogHeader = /*#__PURE__*/React__default["default"].forwardRef((_ref2, ref) => {
  let {
    children,
    ...rest
  } = _ref2;
  const prefix = usePrefix.usePrefix();
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: `${prefix}--dialog__header`,
    ref: ref
  }, rest), children);
});
DialogHeader.propTypes = {
  /**
   * Provide the contents to be rendered inside of this component
   */
  children: PropTypes__default["default"].node
};
const DialogControls = /*#__PURE__*/React__default["default"].forwardRef((_ref3, ref) => {
  let {
    children,
    ...rest
  } = _ref3;
  const prefix = usePrefix.usePrefix();
  return (
    /*#__PURE__*/
    // @ts-ignore
    React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
      className: `${prefix}--dialog__header-controls`,
      ref: ref
    }, rest), children)
  );
});
DialogControls.propTypes = {
  /**
   * Provide children to be rendered inside of this component
   */
  children: PropTypes__default["default"].node
};
const DialogCloseButton = /*#__PURE__*/React__default["default"].forwardRef((_ref4, ref) => {
  let {
    onClick,
    ...rest
  } = _ref4;
  const prefix = usePrefix.usePrefix();
  return (
    /*#__PURE__*/
    // @ts-ignore
    React__default["default"].createElement(index.IconButton, _rollupPluginBabelHelpers["extends"]({
      kind: "ghost",
      className: `${prefix}--dialog__close`,
      label: "Close",
      title: "Close",
      "aria-label": "Close",
      align: "left",
      onClick: onClick
    }, rest), /*#__PURE__*/React__default["default"].createElement(iconsReact.Close, {
      size: 20,
      "aria-hidden": "true",
      tabIndex: "-1",
      className: `${prefix}--icon__close`
    }))
  );
});
DialogCloseButton.propTypes = {
  /**
   * Specify a click handler applied to the IconButton
   */
  onClick: PropTypes__default["default"].func
};

exports.DialogCloseButton = DialogCloseButton;
exports.DialogControls = DialogControls;
exports.DialogHeader = DialogHeader;
exports.unstable__Dialog = unstable__Dialog;
