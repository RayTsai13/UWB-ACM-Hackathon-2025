/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useRef, useState, useLayoutEffect } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { usePrefix } from '../../internal/usePrefix.js';
import { breakpoints } from '@carbon/layout';
import { useMatchMedia } from '../../internal/useMatchMedia.js';
import '../Text/index.js';
import { DefinitionTooltip } from '../Tooltip/DefinitionTooltip.js';
import '../Tooltip/Tooltip.js';
import AspectRatio from '../AspectRatio/AspectRatio.js';
import { Tabs as Tabs$1 } from '../Tabs/Tabs.js';
import { Text } from '../Text/Text.js';

var _p, _p2;

/**
 * ----------
 * PageHeader
 * ----------
 */

const PageHeader = /*#__PURE__*/React__default.forwardRef(function PageHeader(_ref, ref) {
  let {
    className,
    children,
    ...other
  } = _ref;
  const prefix = usePrefix();
  const classNames = cx({
    [`${prefix}--page-header`]: true
  }, className);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    ref: ref
  }, other), _p || (_p = /*#__PURE__*/React__default.createElement("p", null, "page header")), children);
});
PageHeader.displayName = 'PageHeader';

/**
 * -----------------------
 * PageHeaderBreadcrumbBar
 * -----------------------
 */

const PageHeaderBreadcrumbBar = /*#__PURE__*/React__default.forwardRef(function PageHeaderBreadcrumbBar(_ref2, ref) {
  let {
    className,
    children,
    ...other
  } = _ref2;
  const prefix = usePrefix();
  const classNames = cx({
    [`${prefix}--page-header__breadcrumb-bar`]: true
  }, className);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    ref: ref
  }, other), _p2 || (_p2 = /*#__PURE__*/React__default.createElement("p", null, "page header breadcrumb bar")), children);
});
PageHeaderBreadcrumbBar.displayName = 'PageHeaderBreadcrumbBar';

/**
 * -----------------
 * PageHeaderContent
 * -----------------
 */

const PageHeaderContent = /*#__PURE__*/React__default.forwardRef(function PageHeaderContent(_ref3, ref) {
  let {
    className,
    children,
    title,
    subtitle,
    renderIcon: IconElement,
    contextualActions,
    pageActions,
    ...other
  } = _ref3;
  const prefix = usePrefix();
  const classNames = cx({
    [`${prefix}--page-header__content`]: true
  }, className);
  const titleRef = useRef(null);
  const [isEllipsisApplied, setIsEllipsisApplied] = useState(false);
  const isEllipsisActive = element => {
    setIsEllipsisApplied(element.offsetHeight < element.scrollHeight);
    return element.offsetHeight < element.scrollHeight;
  };
  useLayoutEffect(() => {
    titleRef.current && isEllipsisActive(titleRef.current);
  }, [title]);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    ref: ref
  }, other), /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__title-wrapper`
  }, /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__start`
  }, /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__title-container`
  }, IconElement && /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__icon`
  }, /*#__PURE__*/React__default.createElement(IconElement, null)), isEllipsisApplied ? /*#__PURE__*/React__default.createElement(DefinitionTooltip, {
    definition: title
  }, /*#__PURE__*/React__default.createElement(Text, {
    ref: titleRef,
    as: "h4",
    className: `${prefix}--page-header__content__title`
  }, title)) : /*#__PURE__*/React__default.createElement(Text, {
    ref: titleRef,
    as: "h4",
    className: `${prefix}--page-header__content__title`
  }, title)), contextualActions && /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__contextual-actions`
  }, contextualActions)), /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__end`
  }, pageActions && /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__page-actions`
  }, pageActions))), subtitle && /*#__PURE__*/React__default.createElement(Text, {
    as: "h3",
    className: `${prefix}--page-header__content__subtitle`
  }, subtitle), children && /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--page-header__content__body`
  }, children));
});
PageHeaderContent.displayName = 'PageHeaderContent';
PageHeaderContent.propTypes = {
  /**
   * Provide child elements to be rendered inside PageHeaderContent.
   */
  children: PropTypes.node,
  /**
   * Specify an optional className to be added to your PageHeaderContent
   */
  className: PropTypes.string,
  /**
   * Provide an optional icon to render in front of the PageHeaderContent's title.
   */

  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  /**
   * The PageHeaderContent's title
   */
  title: PropTypes.string.isRequired,
  /**
   * The PageHeaderContent's subtitle
   */
  subtitle: PropTypes.string,
  /**
   * The PageHeaderContent's contextual actions
   */
  contextualActions: PropTypes.node,
  /**
   * The PageHeaderContent's page actions
   */
  pageActions: PropTypes.node
};

/**
 * ----------------
 * PageHeaderHeroImage
 * ----------------
 */

const PageHeaderHeroImage = /*#__PURE__*/React__default.forwardRef(function PageHeaderHeroImage(_ref4, ref) {
  let {
    className,
    children,
    ...other
  } = _ref4;
  const prefix = usePrefix();
  const classNames = cx({
    [`${prefix}--page-header__hero-image`]: true
  }, className);
  const lgMediaQuery = `(min-width: ${breakpoints.lg.width})`;
  const isLg = useMatchMedia(lgMediaQuery);
  return /*#__PURE__*/React__default.createElement(AspectRatio, _extends({
    className: classNames
  }, other, {
    ratio: isLg ? '2x1' : '3x2'
  }), children);
});
PageHeaderHeroImage.displayName = 'PageHeaderHeroImage';
PageHeaderHeroImage.propTypes = {
  /**
   * Provide child elements to be rendered inside PageHeaderHeroImage.
   */
  children: PropTypes.node,
  /**
   * Specify an optional className to be added to your PageHeaderHeroImage
   */
  className: PropTypes.string
};

/**
 * ----------------
 * PageHeaderTabBar
 * ----------------
 */

const PageHeaderTabBar = /*#__PURE__*/React__default.forwardRef(function PageHeaderTabBar(_ref5, ref) {
  let {
    className,
    children,
    ...other
  } = _ref5;
  const prefix = usePrefix();
  const classNames = cx({
    [`${prefix}--page-header__tab-bar`]: true
  }, className);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    ref: ref
  }, other), children);
});
PageHeaderTabBar.displayName = 'PageHeaderTabBar';
const PageHeaderTabs = /*#__PURE__*/React__default.forwardRef(function PageHeaderTabs(_ref6, ref) {
  let {
    className,
    children,
    ...other
  } = _ref6;
  return /*#__PURE__*/React__default.createElement(Tabs$1, other, children);
});
PageHeaderTabs.displayName = 'PageHeaderTabs';

/**
 * -------
 * Exports
 * -------
 */
const Root = PageHeader;
Root.displayName = 'PageHeader.Root';
const BreadcrumbBar = PageHeaderBreadcrumbBar;
BreadcrumbBar.displayName = 'PageHeaderBreadcrumbBar';
const Content = PageHeaderContent;
Content.displayName = 'PageHeaderContent';
const HeroImage = PageHeaderHeroImage;
HeroImage.displayName = 'PageHeaderHeroImage';
const TabBar = PageHeaderTabBar;
TabBar.displayName = 'PageHeaderTabBar';
const Tabs = PageHeaderTabs;
Tabs.displayName = 'PageHeader.Tabs';

export { BreadcrumbBar, Content, HeroImage, PageHeader, PageHeaderBreadcrumbBar, PageHeaderContent, PageHeaderHeroImage, PageHeaderTabBar, PageHeaderTabs, Root, TabBar, Tabs };
